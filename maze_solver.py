import time
import random

maze_1 = """
██████████████████████████████████ █████████████
██████████████████████████████████            ██
███████      ██████████     ████████████ ████ ██
███████ ████ ███████    ███ ████     ███ ████ ██
██████  ████ ███████ ██ ███      ███ ███ ████ ██
████████████         ██   ██████████ ███ ████ ██
█████████████████████████ ████   ███ ███ ████ ██
█ █████      ████████████      █ ███     ██   ██
█ █████ ████████████████████████ ██████████ ████
█   ███ █████        ███ ██      ██████████  ███
███  ██ █████ ██████ ███ ██ ██ ██████    ███████
████          ██████        ██        ██   █████
███████████████████████ ████████████████████████
""".strip()

maze_2 = """
████████████████████████████ ██ ████████████████████████████
████████████████████████████ ██ ████████████████████████████
████████████████████████████ ██ ███ █          █████████████
████████████████████████████ ██ ███ █ ████████ █████████████
████████████████████████████ ██ ██    ████████ █████████████
████████████████████████████ ██ ███ █ ████████ █████████████
████████████████████████████ ██     █ ████████ █████████████
████████████████████████████ ████████ ████████ █████████████
████████████████████████████ ████████ ████████ █████████████
████████████████████████████ ████████ ████████ █████████████
████████████████████████████ ████████ ████████ █████████████
████████████████████████████ ████████ ████████    ██████████
████████████████████████████ ████████ ███████████ ██████████
███████████████                       ███████████ ██████████
██████████████  ████████████ ████████████████████ ██████████
████████████   █████████████ ████████████████████ ██████████
████████████████████████████ ████████████████████   ████████
████████████████████████████ ████████████████████ ██████████
█████████████████████████████████████████████████ ██████████
""".strip()


def draw_maze(maze, seen, happy_path=None):
    maze = maze[:]

    if not happy_path:
        for point in seen:
            row_idx, column_idx = point.split(",")
            row = [*maze[int(row_idx)]]
            row[int(column_idx)] = "•"
            maze[int(row_idx)] = "".join(row)
    else:
        for point in happy_path:
            row_idx, column_idx = point.split(",")
            row = [*maze[int(row_idx)]]
            row[int(column_idx)] = "•"
            maze[int(row_idx)] = "".join(row)

    print(chr(27) + "[2J")
    print("\u001b[0;0H")
    print("\n".join(maze))
    time.sleep(0.005)


def solve(raw_maze):
    seen = set()
    maze = raw_maze.split("\n")
    start_line = maze[0]
    start_pos = [0, start_line.index(" ")]

    def search(pos):
        draw_maze(maze, seen)
        if not (0 <= pos[0] < len(maze)) and (0 <= pos[1] < len(maze[0])):
            return []

        if maze[pos[0]][pos[1]] == "█":
            return []

        if f"{pos[0]},{pos[1]}" in seen:
            return []

        seen.add(f"{pos[0]},{pos[1]}")

        # found exit
        if pos[0] == len(maze) - 1:
            return [f"{pos[0]},{pos[1]}"]

        up = [pos[0] - 1, pos[1]]
        right = [pos[0], pos[1] + 1]
        down = [pos[0] + 1, pos[1]]
        left = [pos[0], pos[1] - 1]
        for next_pos in random.sample([left, right, down, up], 4):
            res = search(next_pos)
            if res:
                return [f"{pos[0]},{pos[1]}"] + res

        return []

    happy_path = search(start_pos)
    print(happy_path)
    draw_maze(maze, seen, happy_path)
    print("All done!")
    print(f"It took me: {len(seen)} turns.")
    print(f"The solution is: {len(happy_path)} turns.")


if __name__ == "__main__":
    solve(maze_1)
